import io
from typing import Optional, Union

def hand_tp(tp: str, part_size: int) -> bytes: ...

class Chunk:
    def _init_chunk(self, tp: bytes) -> None: ...
    def __init__(self, type_name: str, part_size: Optional[int]=None) -> None: ...
    
    @property
    def size_data(self) -> int: ...
    @size_data.setter
    def size_data(self, value: int) -> None: ...
    @property
    def type_name(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def closed(self) -> bool: ...
    
    def add(self, data: bytes) -> int: ...
    def get(self, size: Optional[int]=None) -> bytes: ...
    def rewrite(self, data: bytes) -> int: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    @staticmethod
    def from_filepath(path: str, part_size: Optional[int]=None, buffer_size: Optional[int]=None) -> Chunk: ...
    def from_fp(fp: Union[io.BufferedRandom, io.BufferedReader], part_size: Optional[int]=None, buffer_size: Optional[int]=None) -> Chunk: ...